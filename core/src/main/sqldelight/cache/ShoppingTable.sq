import kotlin.Boolean;

CREATE TABLE ShoppingTable (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    productId INTEGER NOT NULL,
    purchasePrice REAL NOT NULL,
    quantity INTEGER NOT NULL,
    date INTEGER NOT NULL,
    isPaid INTEGER AS Boolean NOT NULL
);

insert:
INSERT INTO ShoppingTable(productId, purchasePrice, quantity, date, isPaid)
VALUES(?,?,?,?,?);

update:
UPDATE ShoppingTable SET productId = ?, purchasePrice = ?, quantity = ?, date = ?, isPaid = ?
WHERE id = ?;

delete:
DELETE FROM ShoppingTable WHERE id = ?;

getAll:
SELECT S.id, S.productId, P.name, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S ON(P.id = S.productId);

getById:
SELECT S.id, S.productId, P.name, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S ON(P.id = S.productId) WHERE S.id = ?;

getLast:
SELECT S.id, S.productId, P.name, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S ON(P.id = S.productId) WHERE S.id = last_insert_rowid();

search:
SELECT S.id, S.productId, P.name, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S ON(P.id = S.productId)
WHERE P.name LIKE '%' || :productName || '%';

getItemsLimited:
SELECT S.id, S.productId, P.name, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S ON(P.id = S.productId) ORDER BY S.id DESC LIMIT :offset, :limit;

getLastId:
SELECT last_insert_rowid();