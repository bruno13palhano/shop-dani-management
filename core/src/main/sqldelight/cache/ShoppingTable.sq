import kotlin.Boolean;

CREATE TABLE ShoppingTable (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    stockItemId INTEGER NOT NULL,
    purchasePrice REAL NOT NULL,
    quantity INTEGER NOT NULL,
    date INTEGER NOT NULL,
    isPaid INTEGER AS Boolean NOT NULL
);

insert:
INSERT INTO ShoppingTable(stockItemId, purchasePrice, quantity, date, isPaid)
VALUES(?,?,?,?,?);

update:
UPDATE ShoppingTable SET stockItemId = ?, purchasePrice = ?, quantity = ?, date = ?, isPaid = ?
WHERE id = ?;

delete:
DELETE FROM ShoppingTable WHERE id = ?;

getAll:
SELECT S.id, S.stockItemId, P.name, P.photo, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S INNER JOIN StockOrderTable St
ON(P.id = St.productId AND St.id = S.stockItemId);

getById:
SELECT S.id, S.stockItemId, P.name, P.photo, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S INNER JOIN StockOrderTable St
ON(P.id = St.productId AND St.id = S.stockItemId) WHERE S.id = ?;

getLast:
SELECT S.id, S.stockItemId, P.name, P.photo,S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S INNER JOIN StockOrderTable St
ON(P.id = St.productId AND St.id = S.stockItemId) WHERE S.id = last_insert_rowid();

search:
SELECT S.id, S.stockItemId, P.name, P.photo, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S INNER JOIN StockOrderTable St
ON(P.id = St.productId AND St.id = S.stockItemId) WHERE P.name LIKE '%' || :productName || '%';

getItemsLimited:
SELECT S.id, S.stockItemId, P.name, P.photo, S.purchasePrice, S.quantity, S.date, S.isPaid
FROM product P INNER JOIN ShoppingTable S INNER JOIN StockOrderTable St
ON(P.id = St.productId AND St.id = S.stockItemId) ORDER BY S.id DESC LIMIT :offset, :limit;

getLastId:
SELECT last_insert_rowid();