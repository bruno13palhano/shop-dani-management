import kotlin.Boolean;

CREATE TABLE SaleTable (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    productId INTEGER NOT NULL,
    customerId INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    purchasePrice REAL NOT NULL,
    salePrice REAL NOT NULL,
    dateOfSale INTEGER NOT NULL,
    dateOfPayment INTEGER NOT NULL,
    isOrderedByCustomer INTEGER AS Boolean NOT NULL,
    isPaidByCustomer INTEGER AS Boolean NOT NULL
);

insert:
INSERT INTO SaleTable(productId, customerId, quantity, purchasePrice, salePrice, dateOfSale,
    dateOfPayment, isOrderedByCustomer, isPaidByCustomer)
VALUES (?,?,?,?,?,?,?,?,?);

update:
UPDATE SaleTable SET productId = ?, customerId = ?, quantity = ?, purchasePrice = ?, salePrice = ?,
    dateOfSale = ?, dateOfPayment = ?, isOrderedByCustomer = ?, isPaidByCustomer = ? WHERE id = ?;

delete:
DELETE FROM SaleTable WHERE id = ?;

getAll:
SELECT S.id, S.productId, S.customerId, P.name, C.name, P.photo, S.quantity, S.purchasePrice, S.salePrice,
    PC.categories, P.company, S.dateOfSale, S.dateOfPayment, S.isOrderedByCustomer, S.isPaidByCustomer
FROM product P INNER JOIN SaleTable S INNER JOIN ProductCategoriesTable PC
INNER JOIN CustomerTable C ON(P.categoryId = PC.id AND P.id = S.productId AND S.customerId = C.id);

getById:
SELECT S.id, S.productId, S.customerId, P.name, C.name, P.photo, S.quantity, S.purchasePrice, S.salePrice,
    PC.categories, P.company, S.dateOfSale, S.dateOfPayment, S.isOrderedByCustomer, S.isPaidByCustomer
FROM product P INNER JOIN SaleTable S INNER JOIN ProductCategoriesTable PC
INNER JOIN CustomerTable C ON(P.categoryId = PC.id AND P.id = S.productId AND S.customerId = C.id)
WHERE S.id = ?;

getLast:
SELECT S.id, S.productId, S.customerId, P.name, C.name, P.photo, S.quantity, S.purchasePrice, S.salePrice,
    PC.categories, P.company, S.dateOfSale, S.dateOfPayment, S.isOrderedByCustomer, S.isPaidByCustomer
FROM product P INNER JOIN SaleTable S INNER JOIN ProductCategoriesTable PC
INNER JOIN CustomerTable C ON(P.categoryId = PC.id AND P.id = S.productId AND S.customerId = C.id)
WHERE P.id = last_insert_rowid();

getByCustomerId:
SELECT S.id, S.productId, S.customerId, P.name, C.name, P.photo, S.quantity, S.purchasePrice, S.salePrice,
    PC.categories, P.company, S.dateOfSale, S.dateOfPayment, S.isOrderedByCustomer, S.isPaidByCustomer
FROM product P INNER JOIN SaleTable S INNER JOIN ProductCategoriesTable PC
INNER JOIN CustomerTable C ON(P.categoryId = PC.id AND P.id = S.productId AND S.customerId = C.id)
WHERE S.customerId = :customerId;

getLastSales:
SELECT S.id, S.productId, S.customerId, P.name, C.name, P.photo, S.quantity, S.purchasePrice, S.salePrice,
    PC.categories, P.company, S.dateOfSale, S.dateOfPayment, S.isOrderedByCustomer, S.isPaidByCustomer
FROM product P INNER JOIN SaleTable S INNER JOIN ProductCategoriesTable PC
INNER JOIN CustomerTable C ON(P.categoryId = PC.id AND P.id = S.productId AND S.customerId = C.id)
ORDER BY S.id DESC LIMIT :offset, :limit;

getAllStockSales:
SELECT S.id, S.productId, S.customerId, P.name, C.name, P.photo, S.quantity, S.purchasePrice, S.salePrice,
    PC.categories, P.company, S.dateOfSale, S.dateOfPayment, S.isOrderedByCustomer, S.isPaidByCustomer
FROM product P INNER JOIN SaleTable S INNER JOIN ProductCategoriesTable PC
INNER JOIN CustomerTable C ON(P.categoryId = PC.id AND P.id = S.productId AND S.customerId = C.id)
WHERE isOrderedByCustomer = 0 ORDER BY S.id DESC LIMIT :offset, :limit;

getAllOrdersSales:
SELECT S.id, S.productId, S.customerId, P.name, C.name, P.photo, S.quantity, S.purchasePrice, S.salePrice,
    PC.categories, P.company, S.dateOfSale, S.dateOfPayment, S.isOrderedByCustomer, S.isPaidByCustomer
FROM product P INNER JOIN SaleTable S INNER JOIN ProductCategoriesTable PC
INNER JOIN CustomerTable C ON(P.categoryId = PC.id AND P.id = S.productId AND S.customerId = C.id)
WHERE isOrderedByCustomer = 1 ORDER BY S.id DESC LIMIT :offset, :limit;

getLastId:
SELECT last_insert_rowid();