import kotlin.Boolean;

CREATE TABLE StockOrderTable (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    productId INTEGER NOT NULL,
    date INTEGER NOT NULL,
    validity INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    purchasePrice REAL NOT NULL,
    salePrice REAL NOT NULL,
    isOrderedByCustomer INTEGER AS Boolean NOT NULL,
    isPaid INTEGER AS Boolean NOT NULL,
    FOREIGN KEY (productId) REFERENCES product(id) ON DELETE CASCADE
);

insert:
INSERT INTO StockOrderTable(productId, date, validity, quantity, purchasePrice, salePrice,
    isOrderedByCustomer, isPaid)
VALUES(?,?,?,?,?,?,?, ?);

update:
UPDATE StockOrderTable SET productId = ?, date = ?, validity = ?, quantity = ?, purchasePrice = ?,
    salePrice = ?, isOrderedByCustomer = ?, isPaid = ? WHERE id = ?;

delete:
DELETE FROM StockOrderTable WHERE id = ?;

getAll:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId);

getDebitStock:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId) WHERE S.isPaid = 0 AND isOrderedByCustomer = 0;

getOutOfStock:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId) WHERE S.quantity = 0 AND isOrderedByCustomer = 0;

getById:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId) WHERE S.id = :id;

getLast:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId) WHERE S.id = last_insert_rowId();

getItems:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId AND S.isOrderedByCustomer = :isOrderedByCustomer);

getStockOrderItems:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId AND S.isOrderedByCustomer = :isOrderedByCustomer)
WHERE S.quantity > 0;

getDebitStockByPriceDesc:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId AND S.isOrderedByCustomer = 0)
WHERE isPaid = 0 ORDER BY S.purchasePrice DESC;

getDebitStockByPriceAsc:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId AND S.isOrderedByCustomer = 0)
WHERE isPaid = 0 ORDER BY S.purchasePrice ASC;

getDebitStockByNameDesc:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId AND S.isOrderedByCustomer = 0)
WHERE isPaid = 0 ORDER BY P.name DESC;

getDebitStockByNameAsc:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM product P INNER JOIN StockOrderTable S INNER JOIN ProductCategoriesTable PC
ON(P.categoryId = PC.id AND P.id = S.productId AND S.isOrderedByCustomer = 0)
WHERE isPaid = 0 ORDER BY P.name ASC;

search:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM StockOrderTable S INNER JOIN product P INNER JOIN ProductCategoriesTable PC
ON(P.name LIKE '%' || :name || '%' OR P.company LIKE '%' || :company || '%'
    OR P.description LIKE '%' || :description || '%')
WHERE S.productId = P.id AND PC.id = P.categoryId AND S.isOrderedByCustomer = :isOrderedByCustomer;

getByCategory:
SELECT S.id, P.id, P.name, P.photo, S.date, S.validity, S.quantity, PC.categories, P.company,
    S.purchasePrice, S.salePrice, S.isOrderedByCustomer, S.isPaid
FROM StockOrderTable S INNER JOIN product P INNER JOIN ProductCategoriesTable PC
ON(PC.categories LIKE '%' || :category || '%') WHERE S.productId = P.id AND PC.id = P.categoryId
    AND S.isOrderedByCustomer = :isOrderedByCustomer AND S.quantity > 0;

getStockQuantity:
SELECT quantity FROM StockOrderTable WHERE id = ?;

updateStockOrderQuantity:
UPDATE StockOrderTable SET quantity = ? WHERE id = ?;

lastId:
SELECT last_insert_rowid();